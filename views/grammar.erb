<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
      <i>símbolos no terminales</i>,
      <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.
  Un elemento de $P$ se denomina <i>regla de análisis</i>. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina <i>expresión de arranque</i>.
</ol>
<ol>
  <li> $\Sigma = \{ +, -, *, /, (, ), 0 \ldots 9 \}$, 
  <li> $V = \{prog, block, exp, term, factor, COMPARISON, CALL, IF, THEN, ELSE, WHILE, DO, ADD, MUL, LEFTPAR, RIGHTPAR, ID, NUMBER, \_ \}$
  <li> Reglas de Análisis:
  <ol>
<pre>
prog   = block .
block  = bloques_const* bloques_var* bloques_proc* st

bloques_const = constante otraconstante* ";"
constante = "const" ID "=" NUMBER
otraconstante = "," ID "=" NUMBER

bloques_var = var otrovar* ";"
var    = "var" ID
otro_var = "," ID

bloques_proc = proc proc_parametros? ";" block ";"
proc   = "procedure" ID
proc_parametros = LEFTPAR un_para otro_para* RIGHTPAR
un_para = ID
otro_para = "," ID

st     = ID "=" exp
       / CALL ID proc_parametros?
       / IF cond THEN st ELSE st
       / IF cond THEN st
       / WHILE cond DO st
cond   = factor COMPARISON? exp? 
exp    = term   (ADD term)*
term   = factor (MUL factor)*

factor = NUMBER
       / ID
       / LEFTPAR exp RIGHTPAR

_ = $[ \t\n\r]*

COMPARISON = _ [&lt;&gt;=!]"=" | [&lt;&gt;] | factor _
ADD      = _ [+-] _
MUL      = _ [*/] _
CALL     = _"call"_
LEFTPAR  = _"("_
RIGHTPAR = _")"_
IF       = _ "if" _
THEN     = _ "then" _
ELSE     = _ "else" _
WHILE    = _ "while" _
DO       = _ "do" _
ID       = _ [a-zA-Z_][a-zA-Z_0-9]* _
NUMBER   = _ [0-9]+ _
</pre>
  </ol>
  <li> Expresión de arranque: $exp$
</ol>
<BR>
<BR>
<BR>

